#include <bits/stdc++.h>
using namespace std;

struct UnionFind
{
    vector<int> d;
    UnionFind(int n) : d(n, -1) {}
    int root(int x)
    {
        if (d[x] < 0)
            return x;
        return d[x] = root(d[x]);
    }
    bool unite(int x, int y)
    {
        x = root(x);
        y = root(y);
        if (x == y)
            return false;
        if (d[x] > d[y])
            swap(x, y);
        d[x] += d[y];
        d[y] = x;
        return true;
    }
    bool same(int x, int y) { return root(x) == root(y); }
    int size(int x) { return -d[root(x)]; }
};

void solve(long long N, long long M, long long K, std::vector<long long> A, std::vector<long long> B, std::vector<long long> C, std::vector<long long> D)
{
    int deg[100005];
    vector<int> to[100005];

    UnionFind uf(N);
    for (int i = 0; i < M; i++)
    {
        int a = A[i];
        int b = B[i];
        --a;
        --b;
        deg[a]++;
        deg[b]++;
        uf.unite(a, b);
    }
    for (int i = 0; i < K; i++)
    {
        int a = C[i];
        int b = D[i];
        --a;
        --b;
        to[a].push_back(b);
        to[b].push_back(a);
    }

    for (int i = 0; i < N; i++)
    {
        int ans = uf.size(i) - 1 - deg[i];
        for (int u : to[i])
        {
            if (uf.same(i, u))
                --ans;
        }
        printf("%d%c", ans, i == N - 1 ? '\n' : ' ');
    }
    return;
}

// Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main()
{
    long long N;
    scanf("%lld", &N);
    long long M;
    scanf("%lld", &M);
    long long K;
    scanf("%lld", &K);
    std::vector<long long> A(M);
    std::vector<long long> B(M);

    for (int i = 0; i < M; i++)
    {
        scanf("%lld", &A[i]);
        scanf("%lld", &B[i]);
    }
    std::vector<long long> C(K);
    std::vector<long long> D(K);
    for (int i = 0; i < K; i++)
    {
        scanf("%lld", &C[i]);
        scanf("%lld", &D[i]);
    }
    solve(N, M, K, std::move(A), std::move(B), std::move(C), std::move(D));
    return 0;
}
